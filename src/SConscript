#  -*- mode: python -*-

SConscript('proto/SConscript')

import os

env = Environment()
env['ENV']['TERM'] = os.environ['TERM']
env['CXX'] = 'clang++'
env.Append(CCFLAGS='-std=c++11 -O2')
env.Append(CPPFLAGS=('-I. -DSQLITE_THREADSAFE -DZLIB_CONST '
                     '-DBOOST_MPL_CFG_NO_PREPROCESSED_HEADERS '
                     '-DFUSION_MAX_VECTOR_SIZE=30 -DFUSION_MAX_SET_SIZE=30 '
                     '-DBOOST_MPL_LIMIT_VECTOR_SIZE=30'))
env.Append(LIBPATH='.')
env.Append(LIBPATH='./src/proto')

### Libraries

tar_header_block = env.Library(
    target='tar-header-block',
    source=[
        'tar-header-block.cc',
        ],
    )

bundle_deplibs = [
    tar_header_block,
    'block_proto',
    'bundle_manifest_proto',
    'crypto++',
    ];
bundle = env.Library(
    target='bundle',
    source=[
        'bundle.cc',
        ],
    LIBS=bundle_deplibs,
    )

asio_dispatcher_deplibs = [
    'boost_thread',
    ];
asio_dispatcher = env.Library(
    target='asio-dispatcher',
    source=[
        'asio-dispatcher.cc',
        ],
    LIBS=asio_dispatcher_deplibs,
    )

tcp_connection_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'boost_system-mt',
    'boost_thread',
    ];
tcp_connection = env.Library(
    target='tcp-connection',
    source=[
        'tcp-connection.cc',
        ],
    LIBS=tcp_connection_deplibs,
    )

http_connection_deplibs = [
    asio_dispatcher,
    tcp_connection,
    tcp_connection_deplibs,
    asio_dispatcher_deplibs,
    'curl',
    'boost_regex',
    'http_proto',
    ];
http_connection = env.Library(
    target='http-connection',
    source=[
        'http-connection.cc',
        ],
    LIBS=http_connection_deplibs,
    )

amazon_http_request_util_deplibs = [
    http_connection,
    http_connection_deplibs,
    'crypto++',
    'curl',
    'http_proto',
    ];
amazon_http_request_util = env.Library(
    target='amazon-http-request-util',
    source=[
        'amazon-http-request-util.cc',
        ],
    LIBS=amazon_http_request_util_deplibs,
    )

snapshot_util_deplibs = [
    'snapshot_proto',
    'file_proto',
    'protobuf',
    ];
snapshot_util = env.Library(
    target='snapshot-util',
    source=[
        'snapshot-util.cc',
        ],
    LIBS=snapshot_util_deplibs
    )

candidate_snapshot_generator_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'snapshot_proto',
    'file_proto',
    'protobuf',
    'boost_filesystem-mt',
    'boost_system-mt',
    'boost_thread',
    ];
candidate_snapshot_generator = env.Library(
    target='candidate-snapshot-generator',
    source=[
        'candidate-snapshot-generator.cc',
        'candidate-snapshot-generator-impl.cc',
        ],
    LIBS=candidate_snapshot_generator_deplibs,
    )

chunk_reader_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'block_proto',
    'boost_filesystem-mt',
    'boost_system-mt',
    'boost_iostreams-mt',
    ];
chunk_reader = env.Library(
    target='chunk-reader',
    source=[
        'chunk-reader.cc',
        'chunk-reader-impl.cc',
        ],
    LIBS=chunk_reader_deplibs,
    )

bundle_hasher_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'crypto++',
    ];
bundle_hasher = env.Library(
    target='bundle_hasher',
    source=[
        'bundle-hasher.cc',
        'bundle-hasher-impl.cc',
        ],
    LIBS=bundle_hasher_deplibs,
    )

chunk_hasher_deplibs = [
    chunk_reader,
    asio_dispatcher,
    asio_dispatcher_deplibs,
    chunk_reader_deplibs,
    'block_proto',
    'crypto++',
    ];
chunk_hasher = env.Library(
    target='chunk-hasher',
    source=[
        'chunk-hasher.cc',
        'chunk-hasher-impl.cc',
        ],
    LIBS=chunk_hasher_deplibs,
    )

file_writer_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'block_proto',
    'boost_filesystem-mt',
    'boost_system-mt',
    'boost_iostreams-mt',
    ];
file_writer = env.Library(
    target='file-writer',
    source=[
        'file-writer.cc',
        'file-writer-impl.cc',
        ],
    LIBS=file_writer_deplibs,
    )

filesystem_scanner_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'boost_filesystem-mt',
    'boost_system-mt',
    'boost_thread',
    ];
filesystem_scanner = env.Library(
    target='filesystem-scanner',
    source=[
        'filesystem-scanner.cc',
        'filesystem-scanner-impl.cc',
        ],
    LIBS=filesystem_scanner_deplibs,
    )

compressors_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'bundle_manifest_proto',
    'protobuf',
    'z',
    ];
compressors = env.Library(
    target='compressors',
    source=[
        'compressor.cc',
        'null-compressor-impl.cc',
        'zlib-compressor-impl.cc',
        ],
    libs=compressors_deplibs,
    )

cryptors_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'bundle_manifest_proto',
    'crypto++',
    'protobuf',
    ];
cryptors = env.Library(
    target='cryptors',
    source=[
        'aes-cryptor-impl.cc',
        'cryptor.cc',
        'null-cryptor-impl.cc',
        ],
    libs=cryptors_deplibs,
    )

metadata_db_deplibs = [
    bundle,
    asio_dispatcher,
    asio_dispatcher_deplibs,
    bundle_deplibs,
    'block_proto',
    'snapshot_proto',
    'file_proto',
    'boost_thread',
    'protobuf',
    'sqlite3',
    ];
metadata_db = env.Library(
    target='metadata-db',
    source=[
        'metadata-db.cc',
        'metadata-db-impl.cc',
        'sqlite3-helpers.cc',
        ],
    LIBS=metadata_db_deplibs,
    )

snapshot_state_machine_deplibs = [
    candidate_snapshot_generator,
    chunk_hasher,
    metadata_db,
    snapshot_util,
    asio_dispatcher,
    asio_dispatcher_deplibs,
    snapshot_util_deplibs,
    metadata_db_deplibs,
    chunk_hasher_deplibs,
    candidate_snapshot_generator_deplibs,
    'block_proto',
    'snapshot_proto',
    'file_proto',
    'protobuf',
    ];
snapshot_state_machine = env.Library(
    target='snapshot-state-machine',
    source=[
        'snapshot-state-machine.cc',
        ],
    LIBS=snapshot_state_machine_deplibs,
    )

bundle_state_machine_deplibs = [
    cryptors,
    compressors,
    bundle_hasher,
    chunk_hasher,
    chunk_reader,
    file_writer,
    metadata_db,
    asio_dispatcher,
    bundle,
    bundle_deplibs,
    asio_dispatcher_deplibs,
    metadata_db_deplibs,
    file_writer_deplibs,
    chunk_reader_deplibs,
    chunk_hasher_deplibs,
    bundle_hasher_deplibs,
    compressors_deplibs,
    cryptors_deplibs,
    'block_proto',
    'file_proto',
    'snapshot_proto',
    'protobuf',
    ];
bundle_state_machine = env.Library(
    target='bundle-state-machine',
    source=[
        'bundle-state-machine.cc',
        ],
    LIBS=bundle_state_machine_deplibs,
    )

backup_executor_deplibs = [
    amazon_http_request_util,
    cryptors,
    bundle,
    bundle_state_machine,
    snapshot_state_machine,
    filesystem_scanner,
    asio_dispatcher,
    asio_dispatcher_deplibs,
    filesystem_scanner_deplibs,
    snapshot_state_machine_deplibs,
    bundle_state_machine_deplibs,
    bundle_deplibs,
    cryptors_deplibs,
    amazon_http_request_util_deplibs,
    'boost_filesystem-mt',
    'boost_system-mt',
    'boost_thread',
    'crypto++',
    ];
backup_executor = env.Library(
    target='backup-executor',
    source=[
        'backup-executor.cc',
        ],
    LIBS=backup_executor_deplibs,
    )

### Binaries

polar_express = env.Program(
    target='polar-express',
    source=[
        'polar-express.cc',
        ],
    LIBS=[
        cryptors,
        backup_executor,
        asio_dispatcher,
        asio_dispatcher_deplibs,
        backup_executor_deplibs,
        cryptors_deplibs,
        'pthread',
        'crypto++',
        ],
    )

Default(polar_express)

### Unit Tests

testlibs = ['gmock', 'gtest', 'gtest_main', 'pthread']

# Template for a unit test:

# filesystem_scanner_test = env.Program(
#     target='filesystem-scanner_test',
#     source=[
#         'filesystem-scanner_test.cc',
#         ],
#     LIBS=[
#         filesystem_scanner,
#         filesystem_scanner_deplibs,
#         testlibs,
#         ],
#     )
# run_filesystem_scanner_test = Alias(
#     'run_filesystem_scanner_test',
#     [filesystem_scanner_test],
#     filesystem_scanner_test[0].path)
# AlwaysBuild(run_filesystem_scanner_test)

amazon_http_request_util_test = env.Program(
    target='amazon-http-request-util_test',
    source=[
        'amazon-http-request-util_test.cc',
        ],
    LIBS=[
        amazon_http_request_util,
        amazon_http_request_util_deplibs,
        testlibs,
        'crypto++',
        'protobuf',
        ],
    )
run_amazon_http_request_util_test = Alias(
    'run_amazon_http_request_util_test',
    [amazon_http_request_util_test],
    amazon_http_request_util_test[0].path)
AlwaysBuild(run_amazon_http_request_util_test)

tcp_connection_test = env.Program(
    target='tcp-connection_test',
    source=[
        'tcp-connection_test.cc',
        ],
    LIBS=[
        asio_dispatcher,
        tcp_connection,
        tcp_connection_deplibs,
        asio_dispatcher_deplibs,
        testlibs,
        ],
    )
run_tcp_connection_test = Alias(
    'run_tcp_connection_test',
    [tcp_connection_test],
    tcp_connection_test[0].path)
AlwaysBuild(run_tcp_connection_test)

http_connection_test = env.Program(
    target='http-connection_test',
    source=[
        'http-connection_test.cc',
        ],
    LIBS=[
        asio_dispatcher,
        http_connection,
        http_connection_deplibs,
        asio_dispatcher_deplibs,
        testlibs,
        'http_proto',
        'protobuf',
        ],
    )
run_http_connection_test = Alias(
    'run_http_connection_test',
    [http_connection_test],
    http_connection_test[0].path)
AlwaysBuild(run_http_connection_test)
