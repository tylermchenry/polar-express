#  -*- mode: python -*-

import os
from my_utils import mkdeps

testlibs = ['gtest', 'gtest_main', 'pthread']

env = Environment(tools=['default'])
env['ENV']['TERM'] = os.environ['TERM']
env['CXX'] = 'clang++'
env.Append(CCFLAGS='-std=c++11 -O2')
env.Append(CPPFLAGS=('-I. -Isrc -DSQLITE_THREADSAFE -DZLIB_CONST '
                     '-DBOOST_MPL_CFG_NO_PREPROCESSED_HEADERS '
                     '-DFUSION_MAX_VECTOR_SIZE=30 -DFUSION_MAX_SET_SIZE=30 '
                     '-DBOOST_MPL_LIMIT_VECTOR_SIZE=30 '
                     '-D"GTEST_EXCLUSIVE_LOCK_REQUIRED_(x)=" '
                     '-D"GTEST_LOCK_EXCLUDED_(x)= " '))

# Order is important. Targets in each subdir may only depend on
# targets in preceding subdirs.
ordered_subdirs = [
    'proto', 'base', 'util', 'file', 'network', 'services', 'state_machines']

exports = {}
for d in ordered_subdirs:
    exports[d] = SConscript('%s/SConscript' % d, ['env', 'testlibs', 'exports'])

### Libraries

backup_executor_deplibs = mkdeps([
    exports['base']['asio_dispatcher'],
    exports['file']['bundle'],
    exports['network']['glacier_connection'],
    exports['services']['cryptors'],
    exports['services']['filesystem_scanner'],
    exports['state_machines']['bundle_state_machine'],
    exports['state_machines']['snapshot_state_machine'],
    exports['state_machines']['upload_state_machine'],
    'boost_filesystem',
    'boost_system',
    'boost_thread',
    'crypto++',
    ])
backup_executor = env.StaticLibrary(
    target='backup-executor',
    source=[
        'backup-executor.cc',
        ],
    LIBS=backup_executor_deplibs,
    )
backup_executor_pkg = [
    backup_executor,
    backup_executor_deplibs,
    ]

### Binaries

polar_express = env.Program(
    target='polar-express',
    source=[
        'polar-express.cc',
        ],
    LIBS=mkdeps([
        exports['base']['asio_dispatcher'],
        exports['base']['options'],
        exports['util']['io_util'],
        exports['services']['cryptors'],
        backup_executor_pkg,
        'boost_program_options',
        'crypto++',
        'pthread',
        ]),
    )

Default(polar_express)

### Unit Tests

# Template for a unit test:

# exports['services']['filesystem_scanner']_test = env.Program(
#     target='filesystem-scanner_test',
#     source=[
#         'filesystem-scanner_test.cc',
#         ],
#     LIBS=[
#         exports['services']['filesystem_scanner'],
#         exports['services']['filesystem_scanner_deplibs'],
#         testlibs,
#         ],
#     )
# run_exports['services']['filesystem_scanner']_test = Alias(
#     'run_exports['services']['filesystem_scanner']_test',
#     [exports['services']['filesystem_scanner']_test],
#     exports['services']['filesystem_scanner']_test[0].path)
# AlwaysBuild(run_exports['services']['filesystem_scanner']_test)


