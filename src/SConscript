SConscript('proto/SConscript')

import os

env = Environment()
env['ENV']['TERM'] = os.environ['TERM']
env['CXX'] = 'clang++'
env.Append(CCFLAGS='-std=c++11')
env.Append(CPPFLAGS='-I.')
env.Append(LIBPATH='.')
env.Append(LIBPATH='./src/proto')

### Libraries

candidate_snapshot_generator_deplibs = [
    'boost_filesystem-mt',
    ];
candidate_snapshot_generator = env.Library(
    target='candidate-snapshot-generator', 
    source=[
        'candidate-snapshot-generator.cc',
        ],
    LIBS=candidate_snapshot_generator_deplibs,
    )

filesystem_scanner_deplibs = [
    'boost_filesystem-mt',
    'boost_system-mt',
    'boost_thread',
    ];
filesystem_scanner = env.Library(
    target='filesystem-scanner', 
    source=[
        'filesystem-scanner.cc',
        ],
    LIBS=filesystem_scanner_deplibs,
    )

### Binaries

polar_express = env.Program(
    target='polar-express', 
    source=[
        'polar-express.cc',
        ],
    LIBS=[
        'boost_filesystem-mt',
        'boost_system-mt',
        'boost_thread',
        candidate_snapshot_generator,
        filesystem_scanner,
        'snapshot_proto',
        'file_proto',
        
        candidate_snapshot_generator_deplibs,
        filesystem_scanner_deplibs,
        'protobuf',
        ],
    )

Default(polar_express)

### Unit Tests

testlibs = ['gmock', 'gtest', 'gtest_main']

# Template for a unit test:

# filesystem_scanner_test = env.Program(
#     target='filesystem-scanner_test',
#     source=[
#         'filesystem-scanner_test.cc',
#         ],
#     LIBS=[
#         filesystem_scanner,
#         filesystem_scanner_deplibs,
#         testlibs,
#         ],
#     )
# run_filesystem_scanner_test = Alias(
#     'run_filesystem_scanner_test', 
#     [filesystem_scanner_test], 
#     filesystem_scanner_test[0].path)
# AlwaysBuild(run_filesystem_scanner_test)

