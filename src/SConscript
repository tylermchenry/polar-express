SConscript('proto/SConscript')

import os

env = Environment()
env['ENV']['TERM'] = os.environ['TERM']
env['CXX'] = 'clang++'
env.Append(CCFLAGS='-std=c++11')
env.Append(CPPFLAGS='-I. -DSQLITE_THREADSAFE')
env.Append(LIBPATH='.')
env.Append(LIBPATH='./src/proto')

### Libraries

asio_dispatcher_deplibs = [
    'boost_thread',
    ];
asio_dispatcher = env.Library(
    target='asio-dispatcher', 
    source=[
        'asio-dispatcher.cc',
        ],
    LIBS=asio_dispatcher_deplibs,
    )

snapshot_util_deplibs = [
    'snapshot_proto',
    'file_proto',
    'protobuf',
    ];
snapshot_util = env.Library(
    target='snapshot-util', 
    source=[
        'snapshot-util.cc',
        ],
    LIBS=snapshot_util_deplibs
    )

candidate_snapshot_generator_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'snapshot_proto',
    'file_proto',
    'protobuf',
    'boost_filesystem-mt',
    'boost_thread',
    ];
candidate_snapshot_generator = env.Library(
    target='candidate-snapshot-generator', 
    source=[
        'candidate-snapshot-generator.cc',
        'candidate-snapshot-generator-impl.cc',
        ],
    LIBS=candidate_snapshot_generator_deplibs,
    )

chunk_hasher_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'block_proto',
    'boost_filesystem-mt',
    'boost_iostreams-mt',
    'crypto++',
    ];
chunk_hasher = env.Library(
    target='chunk-hasher', 
    source=[
        'chunk-hasher.cc',
        'chunk-hasher-impl.cc',
        ],
    LIBS=chunk_hasher_deplibs,
    )

filesystem_scanner_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'boost_filesystem-mt',
    'boost_system-mt',
    'boost_thread',
    ];
filesystem_scanner = env.Library(
    target='filesystem-scanner', 
    source=[
        'filesystem-scanner.cc',
        'filesystem-scanner-impl.cc',
        ],
    LIBS=filesystem_scanner_deplibs,
    )

metadata_db_deplibs = [
    asio_dispatcher,
    asio_dispatcher_deplibs,
    'block_proto',
    'snapshot_proto',
    'file_proto',
    'boost_thread',
    'protobuf',
    'sqlite3',
    ];
metadata_db = env.Library(
    target='metadata-db', 
    source=[
        'metadata-db.cc',
        'metadata-db-impl.cc',
        'sqlite3-helpers.cc',
        ],
    LIBS=metadata_db_deplibs,
    )

snapshot_state_machine_deplibs = [
    candidate_snapshot_generator,
    chunk_hasher,
    metadata_db,
    snapshot_util,
    asio_dispatcher,
    asio_dispatcher_deplibs,
    snapshot_util_deplibs,
    metadata_db_deplibs,
    chunk_hasher_deplibs,
    candidate_snapshot_generator_deplibs,
    'block_proto',
    'snapshot_proto',
    'file_proto',
    'protobuf',
    ];
snapshot_state_machine = env.Library(
    target='snapshot-state-machine', 
    source=[
        'snapshot-state-machine.cc',
        ],
    LIBS=snapshot_state_machine_deplibs,
    )

backup_executor_deplibs = [
    snapshot_state_machine,
    filesystem_scanner,
    asio_dispatcher,
    asio_dispatcher_deplibs,
    filesystem_scanner_deplibs,
    snapshot_state_machine_deplibs,
    'boost_filesystem-mt',
    'boost_thread',
    ];
backup_executor = env.Library(
    target='backup-executor', 
    source=[
        'backup-executor.cc',
        ],
    LIBS=backup_executor_deplibs,
    )

### Binaries

polar_express = env.Program(
    target='polar-express', 
    source=[
        'polar-express.cc',
        ],
    LIBS=[
        backup_executor,
        asio_dispatcher,
        asio_dispatcher_deplibs,
        backup_executor_deplibs,
        ],
    )

Default(polar_express)

### Unit Tests

testlibs = ['gmock', 'gtest', 'gtest_main']

# Template for a unit test:

# filesystem_scanner_test = env.Program(
#     target='filesystem-scanner_test',
#     source=[
#         'filesystem-scanner_test.cc',
#         ],
#     LIBS=[
#         filesystem_scanner,
#         filesystem_scanner_deplibs,
#         testlibs,
#         ],
#     )
# run_filesystem_scanner_test = Alias(
#     'run_filesystem_scanner_test', 
#     [filesystem_scanner_test], 
#     filesystem_scanner_test[0].path)
# AlwaysBuild(run_filesystem_scanner_test)

